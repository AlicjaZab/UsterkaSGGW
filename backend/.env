# In all environments, the following files are loaded if they exist,
# the latter taking precedence over the former:
#
#  * .env                contains default values for the environment variables needed by the app
#  * .env.local          uncommitted file with local overrides
#  * .env.$APP_ENV       committed environment-specific defaults
#  * .env.$APP_ENV.local uncommitted environment-specific overrides
#
# Real environment variables win over .env files.
#
# DO NOT DEFINE PRODUCTION SECRETS IN THIS FILE NOR IN ANY OTHER COMMITTED FILES.
#
# Run "composer dump-env prod" to compile .env files for production use (requires symfony/flex >=1.2).
# https://symfony.com/doc/current/best_practices.html#use-environment-variables-for-infrastructure-configuration

###> symfony/framework-bundle ###
APP_ENV=dev
APP_SECRET=32b23c6cc6a3adb94887fcd246e94c6b
###< symfony/framework-bundle ###

###> doctrine/doctrine-bundle ###
# Format described at https://www.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html#connecting-using-a-url
# IMPORTANT: You MUST configure your server version, either here or in config/packages/doctrine.yaml
#
# DATABASE_URL="sqlite:///%kernel.project_dir%/var/data.db"
DATABASE_URL="mysql://db_user:db_password@127.0.0.1:3306/db_name?serverVersion=5.7"
# DATABASE_URL="postgresql://admin:admin123@127.0.0.1:5432/usterka?serverVersion=13&charset=utf8"
###< doctrine/doctrine-bundle ###

###> nelmio/cors-bundle ###
CORS_ALLOW_ORIGIN='^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$'
###< nelmio/cors-bundle ###

## to configure mailer check this page https://symfony.com/doc/current/mailer.html
MAILER_DSN=smtp://user:pass@smtp.example.com:port

## user for API calls, used by frontend, can be used also for manual calls
HTTP_BASIC_AUTH_USERNAME=admin
HTTP_BASIC_AUTH_PASSWORD=admin

# Should be one of: Google/Azure/None
# For "Google" / "Azure", categories will be chosen automatically
# For "None", category should be always specified by user
#
# set to "Google" to use Google Cloud Vision service to provide tags for photos
#    (make sure that GOOGLE_API_KEY has proper value)
# set to "Azure" to use Microsoft Azure Computer Vision service to provide tags for photos
#    (make sure that AZURE_BASE_URL and AZURE_API_KEY have proper values)
TAGGS_PROVIDER="None"

# Microsot Azure constants
# Paste here your api adress provided by azure for your project
AZURE_BASE_URL=""
AZURE_TAGS_ENDPOINT="/analyze?visualFeatures=Tags"
# Paste here your azure key
AZURE_API_KEY=""

#Google Cloud constants
GOOGLE_CLOUD_URL="https://vision.googleapis.com/v1/images:annotate?key="
# Paste here your google key
GOOGLE_API_KEY=""